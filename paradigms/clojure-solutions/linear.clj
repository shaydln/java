(defn abstract [operation] (fn [v1, v2] (mapv operation v1 v2)))
(def v+ (abstract +))
(def v* (abstract *))
(def v- (abstract -))
(def vd (abstract /))
(defn v*s [v, s] (mapv #(* % s) v))
(defn scalar [v1, v2] (apply + (mapv * v1 v2)))
(defn vect [[x1, y1, z1] [x2, y2, z2]]
  [(- (* y1 z2) (* z1 y2))
   (- (* z1 x2) (* x1 z2))
   (- (* x1 y2) (* y1 x2))])
(def m+ (abstract v+))
(def m- (abstract v-))
(def m* (abstract v*))
(def md (abstract vd))
(def transpose (fn [m] (apply mapv vector m)))
(defn m*s [m, s] (mapv (fn [x] (v*s x s)) m))
(defn m*v [m, v] (mapv (fn [x] (scalar x v)) m))
(defn m*m [m1, m2] (mapv #(m*v (transpose m2) %) m1))
(defn abstract_shapeless [f] (fn [a b]
     (if (and (number? a) (number? b)) (f a b)
     (mapv (abstract_shapeless f) a b))))
(def s+ (abstract_shapeless +))
(def s- (abstract_shapeless -))
(def s* (abstract_shapeless *))
(def sd (abstract_shapeless /))